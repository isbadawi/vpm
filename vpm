#!/bin/bash
set -e

BUNDLE_DIR=$HOME/.vim/bundle

function vpm_plugin_exists {
  [ -d "$BUNDLE_DIR/$1" ]
}

function vpm_plugin_git {
  git --git-dir="$BUNDLE_DIR/$1/.git" --work-tree="$BUNDLE_DIR/$1" "${@:2}"
}

function vpm_plugin_is_outdated {
  vpm_plugin_git $1 remote update > /dev/null
  [ -n "$(vpm_plugin_git $1 log HEAD..origin/master --oneline)" ]
}

function vpm_plugin_url {
  vpm_plugin_git $1 config --get remote.origin.url
}

function vpm_plugin_whatchanged {
  old_head=$(vpm_plugin_git $1 rev-parse --short @{1})
  new_head=$(vpm_plugin_git $1 rev-parse --short HEAD)
  echo "Updated $1 from $old_head to $new_head:"
  vpm_plugin_git $1 log --reverse --oneline @{1}..HEAD

  url=$(vpm_plugin_url $1)
  if [[ $url == *github.com* ]]; then
    repo=$(echo $url | sed -e 's/^.*github.com.//' | sed -e 's/.git$//')
    compare_url="https://github.com/$repo/compare/$old_head...$new_head"
    echo "View changes on GitHub: $compare_url"
  fi
}

function vpm_ls {
  ls -G $BUNDLE_DIR
}

function vpm_install {
  plugin_name="$(basename $1)"
  plugin_name="${plugin_name%.*}"
  if vpm_plugin_exists "$plugin_name"; then
    echo "Plugin already installed: $plugin_name"
    return
  fi
  echo "Installing $plugin_name..."
  if [[ "$1" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9_\.-]+$ ]]; then
    plugin_url="git@github.com:$1"
  else
    plugin_url=$1
  fi
  (cd $BUNDLE_DIR && git clone $plugin_url)
}

function vpm_update {
  if [ $# -eq 1 ]; then
    if vpm_plugin_exists "$1"; then
      if vpm_plugin_is_outdated "$1"; then
        # vpm_plugin_is_outdated fetches as a side effect, just need to merge
        vpm_plugin_git $1 merge --ff-only > /dev/null
        vpm_plugin_whatchanged $1
      fi
    else
      echo "No such plugin: $1"
    fi
  else
    for plugin in $(vpm_ls); do
      vpm_update $plugin
    done
  fi
}

function vpm_uninstall {
  if [ $# -eq 1 ]; then
    if vpm_plugin_exists "$1"; then
      echo "Uninstalling $1..."
      rm -rf "$BUNDLE_DIR/$1"
    else
      echo "No such plugin: $1"
    fi
  else
    for plugin in $@; do
      vpm_uninstall $plugin
    done
  fi
}

function vpm_outdated {
  for plugin in $(vpm_ls); do
    if vpm_plugin_is_outdated $plugin; then
      echo $plugin
    fi
  done
}

function vpm_export {
  echo "#!/bin/bash"
  for plugin in $(vpm_ls); do
    echo "vpm install $(vpm_plugin_url $plugin)"
  done
}

function main {
  if [[ $1 =~ ^(ls|install|update|uninstall|outdated|export)$ ]]; then
    eval "vpm_$1 ${@:2}"
  else
    echo "usage: vpm ls
       vpm install user/repo
       vpm update [plugin]
       vpm uninstall plugin
       vpm outdated
       vpm export"
  fi
}

main "$@"
